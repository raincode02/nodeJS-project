generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  description   String
  price         Int
  tags          String[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?        
  comments      ProductComment[]
  productImages ProductImage[]
  productLikes  ProductLike[]
  User          User?            @relation(fields: [userId], references: [id])
  userId        Int?
}

model Article {
  id           Int              @id @default(autoincrement())
  title        String
  content      String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?        
  comments     ArticleComment[]
  articleLikes ArticleLike[]
  User         User?            @relation(fields: [userId], references: [id])
  userId       Int?
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  nickname   String   @unique
  password   String?
  provider   String?
  providerId String?  @unique
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?   

  products        Product[]
  articles        Article[]
  productComments ProductComment[]
  articleComments ArticleComment[]
  productLikes    ProductLike[]
  articleLikes    ArticleLike[]

  @@unique([provider, providerId])
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?  
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Image {
  id            Int            @id @default(autoincrement())
  url           String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?      
  productImages ProductImage[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   Int
  createdAt DateTime @default(now())
  deletedAt DateTime? 

  @@unique([productId, imageId])
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([productId])
}

model ArticleLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@index([articleId])
}

model UploadLog {
  id           Int      @id @default(autoincrement())
  userId       Int?
  filename     String
  originalName String
  mimetype     String
  size         Int
  createdAt    DateTime @default(now())
  deletedAt    DateTime? 
}
